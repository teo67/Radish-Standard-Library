h {
    ;Get the value of any Radish object. x = x.getValue().;
    d getValue p t() {
        h this
    }
    ;Remove an item from an object by searching for its key. This will directly remove the value from memory, similar to 'uproot x' or 'x:y'.
    @key@The key of the value to be deleted.@;
    d delete p t(key p "") {
        h DELETE(this, key)
    }
    ;Safely get an item in an object by its key, harvesting null if the key is not found. Note that bracket or dot syntax will throw an error if the property doesn't exist, unlike Object.get().
    @key@The key of the value to be retrieved.@;
    d get p t(key) {
        h OBJGET(this, key)
    }
    ;Get an array of the keys of an object. For example, getting the keys of an object with { "a": 15, "b": "abc", "c": no } harvests ["a", "b", "c"]. Note that the harvested array will not be directly tied to the object, so editing it will not affect the original.;
    d keys p t() {
        h KEYS(this)
        h []
    }
    ;Get an array of the values in an object. For example, getting the values of an object with { "a": 15, "b": "abc", "c": no } harvests [15, "abc", no]. Note that the harvested array will not be directly tied to the object, so editing it will not affect the original.;
    d values p t() {
        h VALUES(this)
        h []
    }
    ;A private helper tool to clone a value in Radish.
    @item@The value to be cloned without any pointers attached.@;
    d private cloneItem p t(item) {
        d res p type item
        if(res = null) {
            h null
        }
        d ret p null
        switch res {
            case Number
            ret p 0 + item cancel
            case String
            ret p "" + item cancel
            case Boolean
            ret p not!item cancel
            case Function
            ret p FUNCOPY(item) cancel
            case Array
            ret p [] cancel
            case Object
            ret p {} cancel
        }
        each(prop of item.keys()) {
            ret[prop] p cloneItem(item[prop])
        }
        h ret
    }
    ;Recursively duplicate an array, creating new references for every object and array within. The harvested result is a new array that is not tethered in any way to the original.;
    d deepClone p t() {
        h cloneItem(this)
    }
}
