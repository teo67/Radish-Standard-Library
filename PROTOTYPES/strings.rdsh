
    ;Get the length of a string as a number.;
    String.length p 0
    d keys p String.keys()
    DEFINEPROPERTY(String, keys[0], null, t STRLEN(this))
    ;Find the first 0-based index of a character within a string using Radish equivalence. This method will return -1 if the character is not found in the string.
    @input@The character (string with length = 1) to be searched for.@;
    String.indexOf p t(input p "") {
        d len p this.length
        for(d i p 0, i < len, i++) {
            if(this[i] = input) {
                h i
            }
        }
        h -1
    }
    ;Find the last 0-based index of a character within a string using Radish equivalence. This method will return -1 if the character is not found in the string.
    @input@The character (string with length = 1) to be searched for.@;
    String.lastIndexOf p t(input p "") {
        d len p this.length
        for(d i p len - 1, i >= 0, i--) {
            if(this[i] = input) {
                h i
            }
        }
        h -1
    }
    ;Create a string from part of another string by copying character by character, and harvest the new string.
    @start@The 0-based index to start reading at. For example, "abc".substring(1) -> "bc".@
    @finish@The 0-based index to stop reading at. The new string will read up to but will not include the character at the finish index. Example: "abcdef".substring(1, 4) -> "bcd".@;
    String.substring p t(start p 0, finish p this.length) {
        d len p this.length
        if(start < 0 || start > len || finish < 0 || finish > len) {
            throw "String.substring inputs ('start', 'finish') are out of range for length 'len'! (0 <-> length for start, 0 <-> length for finish)"
        }
        d r p ""
        for(d i p start, i < finish, i++) {
            r += this[i]
        }
        h r
    }
    ;Check whether a string begins with a certain starter string. Harvests falsy if the string does not begin with the given input, and truthy otherwise.
    @input@The 'starter string' to be checked for.@;
    String.begins p t(input p "") {
        d res p input.length
        if(res > this.length) {
            h no
        }
        h this.substring(0, res) = input
    }
    ;Check whether a string ends with a certain input string. Harvests falsy if the string does not end with the given input, and truthy otherwise.
    @input@The string to be checked for.@;
    String.ends p t(input p "") {
        d res p this.length - input.length
        if(res < 0) {
            h no
        }
        h this.substring(res) = input
    }
    ;Check whether a string contains a given character using String.indexOf().
    @input@The character (string with length = 1) to be searched for.@;
    String.has p t(input p "") {
        h this.indexOf(input) != -1
    }
    ;Create an array from a string, where each character in the string is converted into a single item in the array.
    @search@The string to split by (defaults to an empty string). A new element will be added to the resulting array whenever the search string is found, and the search string will not be included in the new element.@;
    String.split p t(search p "") {
        d r p []
        d current p ""
        d len p this.length
        for(d i p 0, i < len, i++) {
            current += this[i]
            if(current.ends(search)) {
                r[r.length] p current.substring(0, current.length - search.length)
                current p ""
            }
        }
        h r
    }
    ;Replace all occurrences of a character in a string with another character.
    @search@The character to search for (string with length = 1).@
    @rep@The character to replace every search character with (string with length = 1).@;
    String.replace p t(search, rep) {
        d returning p ""
        d len p this.length
        for(d i p 0, i < len, i++) {
            d res p this[i]
            returning += res = search ? rep, res
        }
        h returning
    }
    ;Add a repeated character to the left of a string and harvest a string with the desired length in total.
    @character@The char (string with length = 1) to add to the left of the string.@
    @targetLength@The final length of the string. The character will be added to the left until this length is attained.@;
    String.padLeft p t(character, targetLength) {
        h character.repeat(targetLength - this.length) + this
    }
    ;Add a repeated character to the right of a string and harvest a string with the desired length in total.
    @character@The char (string with length = 1) to add to the right of the string.@
    @targetLength@The final length of the string. The character will be added to the right until this length is attained.@;
    String.padRight p t(character, targetLength) {
        h this + character.repeat(targetLength - this.length)
    }
    d __key p {}
        __key["a"] p "A"
        __key["b"] p "B"
        __key["c"] p "C"
        __key["d"] p "D"
        __key["e"] p "E"
        __key["f"] p "F"
        __key["g"] p "G"
        __key["h"] p "H"
        __key["i"] p "I"
        __key["j"] p "J"
        __key["k"] p "K"
        __key["l"] p "L"
        __key["m"] p "M"
        __key["n"] p "N"
        __key["o"] p "O"
        __key["p"] p "P"
        __key["q"] p "Q"
        __key["r"] p "R"
        __key["s"] p "S"
        __key["t"] p "T"
        __key["u"] p "U"
        __key["v"] p "V"
        __key["w"] p "W"
        __key["x"] p "X"
        __key["y"] p "Y"
        __key["z"] p "Z"   
    d __reverseKey p {}
        __reverseKey["A"] p "a"
        __reverseKey["B"] p "b"
        __reverseKey["C"] p "c"
        __reverseKey["D"] p "d"
        __reverseKey["E"] p "e"
        __reverseKey["F"] p "f"
        __reverseKey["G"] p "g"
        __reverseKey["H"] p "h"
        __reverseKey["I"] p "i"
        __reverseKey["J"] p "j"
        __reverseKey["K"] p "k"
        __reverseKey["L"] p "l"
        __reverseKey["M"] p "m"
        __reverseKey["N"] p "n"
        __reverseKey["O"] p "o"
        __reverseKey["P"] p "p"
        __reverseKey["Q"] p "q"
        __reverseKey["R"] p "r"
        __reverseKey["S"] p "s"
        __reverseKey["T"] p "t"
        __reverseKey["U"] p "u"
        __reverseKey["V"] p "v"
        __reverseKey["W"] p "w"
        __reverseKey["X"] p "x"
        __reverseKey["Y"] p "y"
        __reverseKey["Z"] p "z"
    String.uppercase p t() {
        d r p ""
        for d i p 0, i < this.length, i++ {
            d res p Object.get.call([this[i]]], __key)
            r += res = null ? this[i], res
        }
        h r
    }
    String.lowercase p t() {
        d r p ""
        for d i p 0, i < this.length, i++ {
            d res p Object.get.call([this[i]], __reverseKey)
            r += res = null ? this[i], res
        }
        h r
    }