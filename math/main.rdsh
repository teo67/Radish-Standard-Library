d usePrimes p import "isPrime"
d math p {
    ;Round a number down to the nearest integer by default, or to the nearest custom interval if defined.
    @input@The number to be floored.@
    @toNearest@The interval (1 by default) to round by. For example, floor(12.5, 5) would return 10.@;
    d floor p t(input p 0, toNearest p 1) {
        h input - input % toNearest
    }
    ;Round a number up to the nearest integer by default, or to the nearest custom interval if defined.
    @input@The number to be ceilinged.@
    @toNearest@The interval (1 by default) to round by. For example, ceiling(12.5, 5) would return 15.@;
    d ceiling p t(input p 0, toNearest p 1) {
        d diff p input % toNearest
        if(diff = 0) {
            h input
        }
        h input + toNearest - diff
    }
    ;Round a number to the nearest integer by default, or to the nearest custom interval if defined.
    @input@The number to be rounded.@
    @toNearest@The interval (1 by default) to round by. For example, round(12.5, 5) would return 15.@;
    d round p t(input, toNearest p 1) {
        d diff p input % toNearest
        if(diff < toNearest / 2) {
            h input - diff
        }
        h input + toNearest - diff
    }
    ;A built-in object with useful math constants such as pi!;
    d constants p {
        ;The value obtained by dividing the circumference of a circle by its diameter.;
        d pi p 3.141592653589793
        ;The value obtained by finding the limit as x approaches infinity of (1+(1/x))^x.;
        d e p 2.7182818285
        ;Equivalent to root(2).;
        d rootTwo p 1.4142135624
        ;Equivalent to root(3).;
        d rootThree p 1.7320508076
    }
    ;Find the natural logarithm of a given input, or a log with a different base if provided.
    @input@The input to the logarithm. For example, log(2) = ln2.@
    @base@The base of the logarithm. Defaults to the constant 'e'.@;
    d log p t(input, base p constants.e) {
        h LOG(input, base) # we'll have to default to an imported function, because the log algorithm has to be highly optimized #
        h -0
    }
    ;Find the square root of an input, or a root with a different exponent if provided.
    @input@The number to be evaluated: (return value ^ exponent) = input.@
    @iexp@The root - or inverse exponent - to be used. Defaults to 2.@;
    d root p t(input p -0, iexp p 2) {
        h input ** (1 / iexp)
    }
    ;Get the factorial of any positive integer.
    @input@The number to find the factorial of. For example, factorial(3) = 3 * 2 * 1 = 6.@;
    d factorial p t(input) {
        d r p 1
        for(d i p 2, i <= input, i++) {
            r *= i
        }
        h r
    }
    ;Sum the positive integers from 1 to a given input. For a more customized summation, you should probably just use a for loop.
    @max@The greatest integer in the summation. For example, summation(3) = 1 + 2 + 3 = 6.@;
    d summation p t(max) {
        d r p 0
        for(d i p 1, i <= max, i++) {
            r += i
        }
        h r
    }
    ;Check whether a given integer is prime. This algorithm is not particularly cheap, but it caches results that can be generalized to other inputs in the future.
    @input@The number to be checked. For example, isPrime(3) harvests yes.@;
    d isPrime p t(input) {
        h usePrimes[1](input)
        h yes
    }
    d degreesToRadians p t(deg p -0) {
        h (deg / 360) * 2 * constants.pi
    }
    d radiansToDegrees p t(rad p -0) {
        h (rad * 360) / (2 * constants.pi)
    }
    ;An object storing the three basic trigonometric functions, as well as their multiplicative inverses and functional inverses (stored in math.a).;
    d trig p {
        ;Get the sine of a radian value.
        @rad@An angle input measured in radians.@;
        d sin p t(rad) {
            h SIN(rad)
            h -0
        }
        ;Get the cosine of a radian value.
        @rad@An angle input measured in radians.@;
        d cos p t(rad) {
            h COS(rad)
            h -0
        }
        ;Get the tangent of a radian value.
        @rad@An angle input measured in radians where (rad % pi) != pi/2.@;
        d tan p t(rad) {
            h TAN(rad)
            h -0
        }
        ;Get the cosecant (1/sin) of a radian value.
        @rad@An angle input measured in radians where rad % pi != 0.@;
        d csc p t(rad) {
            h 1 / SIN(rad)
            h -0
        }
        ;Get the secant (1/cos) of a radian value.
        @rad@An angle input measured in radians where (rad % pi) != pi/2.@;
        d sec p t(rad) {
            h 1 / COS(rad)
            h -0
        }
        ;Get the cotangent (1/tan) of a radian value.
        @rad@An angle input measured in radians where rad % pi != 0.@;
        d cot p t(rad) {
            if(rad % constants.pi = constants.pi / 2) {
                h 0 # special case #
            }
            h 1 / TAN(rad)
        }
        ;An object storing the functional inverses of the three basic trigonometric functions and their multiplicative inverses.;
        d a p {
            ;Get the arcsine (sin -1) of a scalar value.
            @sca@A scalar input value within [-1, 1].@;
            d sin p t(sca) {
                h ASIN(sca)
                h -0
            }
            ;Get the arccosine (cos -1) of a scalar value.
            @sca@A scalar input value within [-1, 1].@;
            d cos p t(sca) {
                h ACOS(sca)
                h -0
            }
            ;Get the arctangent (tan -1) of a scalar value.
            @sca@A scalar input value.@;
            d tan p t(sca) {
                h ATAN(sca)
                h -0
            }
            ;Get the arccosecant (sin -1) with respect to (1/x) of a scalar value.
            @sca@A scalar input value within (-infinity, -1] U [1, infinity).@;
            d csc p t(sca) {
                h ASIN(1 / sca)
                h -0
            }
            ;Get the arcsecant (cos -1) with respect to (1/x) of a scalar value.
            @sca@A scalar input value within (-infinity, -1] U [1, infinity).@;
            d sec p t(sca) {
                h ACOS(1 / sca)
                h -0
            }
            ;Get the arccotangent (tan -1) with respect to (1/x) of a scalar value.
            @sca@A scalar input value.@;
            d cot p t(sca) {
                if(sca = 0) {
                    h constants.pi / 2 # special case #
                }
                h ATAN(1 / sca)
            }
        }
    }
    ;Get the absolute value of a given input, and harvest a nonnegative number.
    @input@x, where the result is |x|.@;
    d abs p t(input) {
        h input < 0 ? -input, input
    }
    ;Get the full prime factor breakdown of a given number using the same cache as in isPrime(). This means that this tool will be faster if isPrime() has already been called, and vice versa.
    @input@The input to factor. For example, 18 => 3 * 3 * 2 => [3, 3, 2].@;
    d getPrimeFactors p t(input) {
        usePrimes[1](input, no) # be sure to generate primes up to input #
        d copy p input
        d factors p []
        while(copy > 1) {
            for(d i p 0, i < usePrimes[0].length && usePrimes[0][i] <= copy, i++) {
                d got p usePrimes[0][i]
                if(copy % got = 0) {
                    copy /= got
                    factors[factors.length] p got
                }
            }
        }
        h factors
    }
    ;Get all possible factors of a given number as an array, ordered in pairs beginning with (1, n). For example, factoring 32 harvests [1, 32, 2, 16, 4, 8].
    @input@The value to find factors of (numeric).@;
    d getAllFactors p t(input) {
        d factors p []
        for(d i p 1, i ** 2 <= input, i++) {
            if(input % i = 0) {
                factors[factors.length] p i
                if(i ** 2 != input) {
                    factors[factors.length] p input / i
                }
            }
        }
        h factors
    }
    ;Find the greatest common denominator of two numbers by comparing their factors. This tool has relatively high time complexity and should be used sparingly (if at all).
    @a@The first number to compare to the second number.@
    @b@The second number to compare to the first number.@;
    d greatestCommonDenominator p t(a, b) {
        d factorA p getAllFactors(a)
        d factorB p getAllFactors(b)
        d max p 1
        for(d i p factorA.length - 1, i >= 0, i--) {
            for(d j p factorB.length - 1, j >= 0, j--) {
                if(factorA[i] = factorB[j]) {
                    if(factorA[i] > max) {
                        max p factorA[i]
                    }
                    cancel
                }
            }
        }
        h max # something went wrong by now #
    }
    ;Find the least common multiple of two numbers by iterating until an equivalent value is found.
    @a@The first number to be compared to the second number.@
    @b@The second number to be compared to the first number.@;
    d leastCommonMultiple p t(a p -0, b p -0) {
        d multA p a
        d multB p b
        while(multA != multB) {
            if(multA < multB) {
                multA += a
            } else {
                multB += b
            }
        }
        h multA
    }
    ;Generate a random nonnegative integer between 0 and 2^64 - 1. This is done using a formula known as xorshift128+, which is pseudorandom but generates numbers in a range from 0 <-> (2^65 - 2).;
    d randInt p import "random"
    ;Generate a random floating point value between 0 and 1, exclusive of one. See math.randInt() for more details.;
    d random p t() {
        h this.randInt() / 18446744073709551616
    }
}
;An object that provides core functionality for basic mathematical operations.;
h math