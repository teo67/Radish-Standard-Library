d BinaryTreeNode p class {
    constructor p t(val, left p null, right p null) {
        this.val p val
        this.left p left
        this.right p right
    }
}
d BinaryTree p class {
    ;A private node that is only accessed within the tree's machinery.;
    d private __head
    ;A private value that helps the tree keep track of whether it's currently inverted.;
    d private __inverted
    constructor p t(fill vals) {
        this.__head p null
        this.__inverted p 1
        this.add.call(vals, this)
    }
    ;A tool used to determine whether nodes should continue to the left or to the right of the parent. If the comparator returns -1, the node continues to the left. Otherwise, the comparator returns 1 and it continues to the right.
    @adding@The value of the node being that is being searched for, added, or deleted.@
    @viewing@The current parent node that is being checked against the node being searched for.@;
    d comparator p t(adding, viewing) {
        if(adding > viewing) {
            h 1
        }
        h -1
    }
    ;Get the value of the tree's head if it exists, or null otherwise.;
    d head {
        h {
            if(this.__head == null) {
                h null
            }
            h this.__head.val
        }
    }
    ;Append any number of values to the tree one by one. Values are added such that all left nodes are <= to their parent and all right nodes are > than their parent node, unless a custom comparator is selected.
    @vals@Supply any number of values to be added. They will be added in the order specified by the user.@;
    d add p t(fill vals) {
        for(d i p 0, i < vals.length, i++) {
            d val p vals[i]
            if(this.__head == null) {
                this.__head p new BinaryTreeNode(val)
                continue
            }
            d current p this.__head
            while(yes) {
                d res p this.comparator(val, current.val) * this.__inverted
                if(res == 1) {
                    if(current.right == null) {
                        current.right p new BinaryTreeNode(val)
                        cancel
                    }
                    current p current.right
                } else {
                    if(current.left == null) {
                        current.left p new BinaryTreeNode(val)
                        cancel
                    }
                    current p current.left
                }
            }
        }
        h this
    }
    ;Check whether a binary tree contains a given value. If the binary tree is inverted beforehand, this tool will not function properly.
    @val@The value to be searched for.@;
    d search p t(val) {
        d current p this.__head
        while(current != null) {
            if(val == current.val) {
                h yes
            }
            d res p this.comparator(val, current.val) * this.__inverted
            if(res == 1) {
                current p current.right
            } else {
                current p current.left
            }
        }
        h no
    }
    ;A private helper tool to be used by traverse(), along with some other functions. See BinaryTree.traverse for more information.
    @onEach@The tool to be executed for every node found in the tree. It takes one parameter, which is the node itself.@
    @root@The root to begin traversing at.@;
    d private __traverse p t(onEach, root p this.__head) {
        if(root == null) {
            h this
        }
        d r p root.right
        this.__traverse(onEach, root.left)
        onEach(root)
        h this.__traverse(onEach, r)
    }
    ;Sweep across a binary tree in a left-parent-right order, such that nodes are inspected from least to greatest. The onEach parameter is called for every node.
    @onEach@The tool to be executed for every node found in the tree. It takes one parameter, which is the value of the node.@;
    d traverse p t(onEach) {
        h this.__traverse(t(root) {
            onEach(root.val)
        })
    }
    d traverseParentLeftRight p t(onEach, root p this.__head) {
        if(root == null) {
            h this
        }
        onEach(root.val)
        h this.traverseParentLeftRight(onEach, root.left).traverseParentLeftRight(onEach, root.right)
    }
    ;Get the leftmost value stored in a binary tree (usually the minimum, unless the comparator has been changed manually). The optional parameter is only used in Radish's private machinery.
    @root@The root to begin traversal at.@;
    d leftmost p t(root p this.__head) {
        if(root == null) {
            throw "Cannot find the leftmost value of a null root!"
        }
        d current p root
        while(current.left != null) {
            current p current.left
        }
        h current.val
    }
    ;Get the rightmost value stored in a binary tree (usually the maximum, unless the comparator has been changed manually). The optional parameter is only used in Radish's private machinery.
    @root@The root to begin traversal at.@;
    d rightmost p t(root p this.__head) {
        if(root == null) {
            throw "Cannot find the rightmost value of a null root!"
        }
        d current p root
        while(current.right != null) {
            current p current.right
        }
        h current.val
    }
    ;Invert a binary tree such that every pair of left and right pointers are swapped. Note that this tool will alter binary tree search and add functions to account for the difference.;
    d invert p t() {
        this.__inverted *= -1
        h this.__traverse(t(root) {
            d s p root.left
            root.left p root.right
            root.right p s
        })
    }
    ;Get the length of the binary tree by traversing every node. Note that this can be quite time-expensive depending on the size of the tree.;
    d length {
        h {
            d len p 0
            this.traverse(t(root) {
                len++
            })
            h len
        }
    }
    ;Generate an array based on a binary tree by traversing every node. The array will be sorted from least to greatest, unless the tree is inverted.;
    d getArray p t() {
        d arr p []
        this.traverse(t(val) {
            arr.push(val)
        })
        h arr 
    } 
    ;A private helper tool to be used by delete().
    @val@The value to be removed from the tree.@
    @root@The root to search in.@;
    d private __delete p t(val, root p this.__head) {
        if (root == null) {
            throw "No value 'val' found to delete!"
        }
        d res p this.comparator(val, root.val) * this.__inverted
        if(val == root.val) {
            if (root.left == null && root.right == null) {
                h null
            } elseif (root.left == null) {
                h root.right
            } elseif (root.right == null) {
                h root.left
            }
            d lm p this.leftmost(root.right)
            root.val p lm
            root.right p this.__delete(lm, root.right)
        } elseif (res == -1) {
            root.left p this.__delete(val, root.left)
        } else {
            root.right p this.__delete(val, root.right)
        }
        h root
    }
    ;Remove a value from a binary tree. If the node found has no children, it will simply be deleted. If it has one child, that child will replace it as the new value of the node. If it has two children, the leftmost node on the right branch will itself be removed from the tree, and its value will replace the value of the deleted node.
    @val@The value to be removed from the tree.@;
    d delete p t(val) {
        this.__head p this.__delete(val)
        h this
    }
    ;Completely rebuild the binary tree by traversing it and forming a new head. This tool can be used when a tree's comparator changes after it has already been added to, in which case it needs to be re-sorted.;
    d rebuild p t() {
        d s p this.__head
        this.__head p null
        this.traverseParentLeftRight(t(val) {
            this.add(val)
        }, s)
        h this
    }
}
h BinaryTree