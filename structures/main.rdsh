;A collection of useful data structures - for arrays, see the built-in Array object.;
h {
    ;A LIFO data structure where each node stores a value and is attached to one other node. Stacks are typically accessed via the head, or the most recent value added to the stack.
    @vals@Specify any number of values to be added to the stack as it is constructed. Values will be pushed one by one such that the last value specified becomes the head of the stack.@;
    d Stack p import "Stack"
    ;A linear data structure where each node stores a value and is attached to one other node. Note that stacks and linked lists are identical in Radish, save the name. This is because their relative structures are fundamentally the same, and the only difference is lack of functionality for accessing elements of stacks. In Radish, the Stack/LinkedList class has all of the functionality needed to use a linked list - if you wish to save time complexity, just don't use the expensive methods!
    @vals@Specify any number of values to be added to the list as it is constructed. Values will be pushed one by one such that the last value specified becomes the head of the list.@;
    d LinkedList p import "Stack"
    ;A data structure where each node stores a value and is attached to two other nodes - one to the left, and one to the right. The node on the left is always <= to its parent, while the right is always greater. Binary trees are used to efficiently search sorted lists of numbers.
    @vals@Specify any number of values to be added to the tree as it is constructed. Values will be pushed one by one such that the first value becomes the head of the tree.@;
    d BinaryTree p import "BinaryTree"
    ;A FIFO data structure that inherits from Stack/LinkedList. The primary difference is that queues store a 'tail' property, which allows the user to access both ends of the queue with low time complexity. Otherwise, everything is the same except that pushing to a queue adds to the tail while pushing to a stack adds to the head.
    @vals@Specify any number of values to be added to the queue as it is constructed. Values will be pushed one by one such that the last value specified becomes the tail of the queue.@;
    d Queue p import "Queue"
    ;A unique data structure representing a two-dimensional table of values. Tables can be linked and nested within each other to produce well-organized and mutable datasets. Because tables store values internally within arrays, access time converges at O(1) but insertion and deletion are not available.
    @width@The initial width of the table. This can be edited later using addCol().@
    @height@The initial height of the table. This can be edited later using addRow().@
    @default@The default value used to fill the table before any unique values are set.@;
    d Table p import "Table"
}