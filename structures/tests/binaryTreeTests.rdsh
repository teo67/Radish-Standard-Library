d Tests p import "../../Tests"
h t() {
    d tree p new structures.BinaryTree(3, 5, 4, 1, 2) # 3(1(n, 2), 5(4, n)) #
    h new Tests(["head", "add", "search", "traverse", "min", "max", "invert", "length", "getArray", "delete no child", "delete one child", "delete two child", "delete head"], [
        t() {
            h tree.head == 3
        }, t() {
            h tree.add(0, 6).search(0) && tree.search(6) # 3(1(0, 2), 5(4, 6)) #
        }, t() {
            h tree.search(2) && tree.search(4)
        }, t() {
            d str p ""
            tree.traverse(t(num) {
                str += num
            })
            h str == "0123456"
        }, t() {
            h tree.min() == 0
        }, t() {
            h tree.max() == 6
        }, t() {
            if(tree.invert().search(0)) {
                h no
            }
            tree.invert() # get things back in order #
            h yes
        }, t() {
            h tree.length == 7
        }, t() {
            d res p tree.getArray()
            h res[0] == 0 && res[2] == 2 && res[4] == 4 && res[6] == 6
        }, t() {
            h !tree.delete(2).search(2) # 3(1(0, n), 5(4, 6)) #
        }, t() {
            h !tree.delete(1).search(1) && tree.search(0) # 3(0, 5(4, 6)) #
        }, t() {
            tree.add(5.5) # 3(0, 5(4, 6(5.5, n))) #
            h !tree.delete(5).search(5) && tree.search(4) && tree.search(6) && tree.search(5.5) # 3(0, 5.5(4, 6)) #
        }, t() {
            tree.add(1)
            tree.add(-1) # 3(0(-1, 1), 5.5(4, 6)) #
            h !tree.delete(3).search(3) && tree.head == 4 && tree.search(1) && tree.search(5.5) && tree.search(6) # 4(0(-1, 1), 5.5(n, 6)) #
        }
    ], 13).execute()
}