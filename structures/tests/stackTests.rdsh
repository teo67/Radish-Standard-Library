d Tests p import "../../Tests"
h t() {
    d stack p new structures.Stack(1, 2, 3) # 3 - 2 - 1 #
    h new Tests(["push", "pop", "length", "head", "get", "indexOf", "lastIndexOf", "has", "insert one", "insert many", "head insert one", "head insert many", "delete one", "delete many", "head delete one", "head delete many", "set", "getArray"], 
    [
        t() {
            h stack.push(4).head == 4 && stack.get(1) == 3
        }, t() {
            h stack.pop() == 4 && stack.head == 3
        }, t() {
            h stack.length == 3
        }, t() {
            h stack.head == 3
        }, t() {
            h stack.get(1) == 2
        }, t() {
            h stack.indexOf(2) == 1
        }, t() {
            stack.push(2) # 2 - 3 - 2 - 1 #
            h stack.lastIndexOf(2) == 2
        }, t() {
            h stack.has(1)
        }, t() {
            h stack.insert(2, 5).indexOf(5) == 2 # 2 - 3 - 5 - 2 - 1 #
        }, t() {
            h stack.insert(1, "a", "b", "c").get(1) == "c" && stack.get(2) == "b" && stack.get(3) == "a" && stack.get(4) == 3 # 2 - c - b - a - 3 - 5 - 2 - 1#
        }, t() {
            h stack.insert(0, "d").head == "d" && stack.get(1) == 2 # d - 2 - c - b - a - 3 - 5 - 2 - 1 #
        }, t() {
            h stack.insert(0, 10, 9, 8).head == 8 && stack.get(1) == 9 && stack.get(2) == 10 && stack.get(3) == "d" # 8 - 9 - 10 - d - 2 - c - b - a - 3 - 5 - 2 - 1 #
        }, t() {
            h stack.delete(3) == "d" && stack.get(3) == 2 # 8 - 9 - 10 - 2 - c - b - a - 3 - 5 - 2 - 1 #
        }, t() {
            d res p stack.delete(4, 3, yes)
            h res[0] == "c" && res[1] == "b" && res[2] == "a" && stack.get(4) == 3 # 8 - 9 - 10 - 2 - 3 - 5 - 2 - 1 #
        }, t() {
            h stack.delete(0) == 8 && stack.head == 9 # 9 - 10 - 2 - 3 - 5 - 2 - 1 #
        }, t() {
            d res p stack.delete(0, 4, yes)
            h res[0] == 9 && res[1] == 10 && res[2] == 2 && res[3] == 3 && stack.head == 5 # 5 - 2 - 1 #
        }, t() {
            h stack.set(3, 0).head == 3 && stack.get(1) == 2 # 3 - 2 - 1 #
        }, t() {
            d res p stack.getArray()
            h res[0] == 3 && res[1] == 2 && res[2] == 1
        }
    ]).execute()
}